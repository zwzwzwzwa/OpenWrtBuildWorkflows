#
# Copyright (c) 2022-2023 Curious <https://www.curious.host>
#
# 本软件为自由软件，采用 MIT License 许可。
# 更多信息请参见 /LICENSE。
# 
# https://github.com/Curious-r/OpenWrtBuildWorkflows
# 描述： 自动检查 OpenWrt 源代码更新并构建它。无需额外密钥。
# required.
#
# 某些功能来自 https://github.com/P3TERX/Actions-OpenWrt，请访问软件源获取其 # 版权信息。
# 版权信息。
#-------------------------------------------------------------------------------------------------------

# GitHub Actions 中显示的工作流名称。
name: Build Example-Firmware for Example-Device

on:
  workflow_dispatch:
    inputs:
      force-build:
        description: "Build new firmware anyway"
        required: false
        default: "false"
      ssh:
        description: "SSH connection to Actions"
        required: false
        default: "false"
# 取消下面的注释，以便定期运行。注意此处的 cron 表达式不包含秒数。
  schedule:
    - cron: 0 */18 * * *

env:
  # REPO 指在此工作流程中要使用的 OpenWrt 版本库。
  # 您可以将 REPO_NAME 修改为任何您想要的名称，但切记不要让它在以下文件中使用相同的名称
  # 其他工作流程。
  REPO_NAME: example-name
  REPO_URL: https://github.com/example/example.git
  REPO_BRANCH: example-branch
  BUILD_DEPENDS:  "ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 \
                   ccache clang cmake cpio curl device-tree-compiler fastjar file flex gawk gettext gcc-multilib \
                   g++ g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev \
                   libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev \
                   libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full \
                   patch pkgconf python2.7 python3 python3-distutils python3-pip libpython3-dev qemu-utils rsync \
                   scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd \
                   zlib1g-dev"
  # CONFIG_FILE 是用于编译的配置文件名，应将这些文件上传到根目录中。
  # 工作流程软件仓库的目录。
  CONFIG_FILE: example.config
  # CUSTOM_SCRIPT_1 是要在 feeds 更新&安装之前执行的额外 bash 脚本的名称。
  # CUSTOM_SCRIPT_2 是您要在 feeds 更新&安装后执行的额外 bash 脚本的名称。
  # 您可以通过这两个脚本修改固件的初始设置。如果这是您所需要的、
  # 请将脚本上传到工作流软件仓库的根目录。
  CUSTOM_SCRIPT_1: example-custom-script-1.sh
  CUSTOM_SCRIPT_2: example-custom-script-2.sh
  # STORE_PRODUCTS 决定是否将所有编译产品上传到工作流工件。
  # 不仅仅是固件线，所有编译包都会在这里，包括已编译但未固化为固件的包。
  STORE_PRODUCTS: false
  # STORE_FIRMWARE 决定是否将固件上传到工作流工件。
  STORE_FIRMWARE: true
  # 以下是固件需要转移到哪里的选项。
  COWTRANSFER_FIRMWARE: false
  WETRANSFER_FIRMWARE: false
  RELEASE_FIRMWARE: false
  # 将以下内容更改为您所在的时区。
  TIME_ZONE: Asia/Shanghai

jobs:
  check:
    name: Check for source code updates
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-hash.outputs.cache-hit }}

    steps:
      - name: Get Commit Hash
        id: get-hash
        run: |
          git clone --depth 1 --branch $REPO_BRANCH --single-branch $REPO_URL ./
          echo "commit-hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Compare Commit Hash
        id: cache-hash
        uses: actions/cache@main
        with:
          path: .${{ env.REPO_NAME }}-${{ env.REPO_BRANCH }}-commit-hash
          key: HEAD-${{ steps.get-hash.outputs.commit-hash }}

      - name: Save New Commit Hash
        if: steps.cache-hash.outputs.cache-hit != 'true'
        run: |
          echo ${{ steps.get-hash.outputs.commit-hash }} | 
            tee .$REPO_NAME-$REPO_BRANCH-commit-hash

  build:
    name: Build firmware
    runs-on: ubuntu-latest
    needs: check
    permissions:
      contents: write
    if: needs.check.outputs.cache-hit != 'true' || github.event.inputs.force-build == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet/ /usr/local/lib/android/ /opt/ghc/
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $BUILD_DEPENDS
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone $TIME_ZONE
          sudo mkdir -p /workdir/
          sudo chown $USER:$GROUPS /workdir/

      - name: Clone source code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone --depth 1 --branch $REPO_BRANCH --single-branch $REPO_URL openwrt/
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Run custom-script-1
        run: |
          chmod +x $CUSTOM_SCRIPT_1
          cd openwrt/
          $GITHUB_WORKSPACE/$CUSTOM_SCRIPT_1

      - name: Update feeds
        run: cd openwrt/ && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt/ && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [ -e files ] && mv files/ openwrt/files/
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
 
      - name: Run custom-script-2
        run: |
          chmod +x $CUSTOM_SCRIPT_2
          cd openwrt/
          $GITHUB_WORKSPACE/$CUSTOM_SCRIPT_2

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@main
        if: github.event.inputs.ssh == 'true' || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Download packages
        id: download-packages
        run: |
          cd openwrt/
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt/
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Upload all compilation products
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.STORE_PRODUCTS == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin/

      - name: Organize firmware-related files
        id: organize-files
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages/
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize-files.outputs.status == 'success' && env.STORE_FIRMWARE == 'true' && !cancelled()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Upload firmware to cowtransfer
        id: cowtransfer
        if: steps.organize-files.outputs.status == 'success' && env.COWTRANSFER_FIRMWARE == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
          echo "::notice file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
          echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

      - name: Upload firmware to WeTransfer
        id: wetransfer
        if: steps.organize-files.outputs.status == 'success' && env.WETRANSFER_FIRMWARE == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::notice file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

      - name: Generate release tag
        id: tag
        if: env.RELEASE_FIRMWARE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "Build from $REPO_URL $REPO_BRANCH" >> release.txt
          [ $COWTRANSFER_FIRMWARE = true -o $WETRANSFER_FIRMWARE = true ] && echo 'Products transfer:' >> release.txt
          [ $COWTRANSFER_FIRMWARE = true ] && echo \
            "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
          [ $WETRANSFER_FIRMWARE = true ] && echo \
            "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release
        uses: softprops/action-gh-release@master
        if: steps.tag.outputs.status == 'success' && !cancelled()
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

  clean:
    name: Clean up old assets
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write

    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 1

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@master
        if: env.RELEASE_FIRMWARE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
